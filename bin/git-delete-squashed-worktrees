#!/usr/bin/env bash
# reset environment variables that could interfere with normal usage
unset -v GREP_OPTIONS
# put all utility functions here

# make a temporary file
git_extra_mktemp() {
    mktemp -t "$(basename "$0")".XXXXXXX
}

git_extra_default_branch() {
    local extras_default_branch init_default_branch
    extras_default_branch=$(git config --get git-extras.default-branch)
    init_default_branch=$(git config --get init.defaultBranch)
    if [ -n "$extras_default_branch" ]; then
        echo "$extras_default_branch"
    elif [ -n "$init_default_branch" ]; then
        echo "$init_default_branch"
    else
        echo "main"
    fi
}
#
# check whether current directory is inside a git repository
#

is_git_repo() {
  git rev-parse --show-toplevel > /dev/null 2>&1
  result=$?
  if test $result != 0; then
    >&2 echo 'Not a git repo!'
    exit $result
  fi
}

is_git_repo

set -euo pipefail

if [[ $# -eq 0 ]]; then
  targetBranch=$(git rev-parse --abbrev-ref HEAD)
else
  targetBranch=$1
  git checkout "$targetBranch"
fi

git for-each-ref refs/heads/ "--format=%(refname:short)" | while read -r branch; do
    mergeBase=$(git merge-base "$targetBranch" "$branch")

    if [[ $(git cherry "$targetBranch" "$(git commit-tree "$(git rev-parse "$branch^{tree}")" -p "$mergeBase" -m _)") == "-"* ]]; then
        worktree_dir="$(git worktree list | grep "\[${branch}\]" | awk '{print $1}')"
        if [ -d "$worktree_dir" ]; then
            echo Removing "$branch"
            set +eo pipefail
            git worktree remove "$worktree_dir"
            set -eo pipefail
        fi
    fi
done
